// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
//migration       npm exec prisma migrate dev

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// model Session {
//   id        String     @id @default(cuid())
//   user_id   String      @unique
//   token String @unique
//   freshToken String @unique
//   expiredAt DateTime 
//   createdAt DateTime     @default(now())
//   updatedAt DateTime     @updatedAt
// }

model Users {
  id        String      @id @default(cuid())
  name      String
  email     String      @unique
  password  String
  phone     Float
  adress    String
  ville     String
  roles     Json        @default("[\"ROLE_USER\"]")
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  store     Stores[]
  commande  Commandes[]
  cart      Carts[]
}

model Stores {
  id        String       @id @default(cuid())
  name      String
  pseudo    String?
  ville     String
  adress    String
  logo      String?
  longitude String       @unique
  latitude  String       @unique
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  user      Users?       @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id   String?
  gasbottle GasBottles[]
}

model GasBottles {
  id             String            @id @default(cuid())
  brand          String
  width          Float
  stock          Int
  price          Float
  description    String            @db.Text
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  store          Stores?           @relation(fields: [store_id], references: [id], onDelete: Cascade)
  store_id       String?
  commande_items Commandes_Items[]
  cart_item      Carts_Items[]
}

model Carts {
  id          String        @id @default(cuid())
  total_price Float         @default(0)
  user        Users         @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id     String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  cart_item   Carts_Items[]
}

model Carts_Items {
  id            String     @id @default(cuid())
  quatity       Float
  cart          Carts      @relation(fields: [cart_id], references: [id], onDelete: Cascade)
  cart_id       String
  gas_bottle    GasBottles @relation(fields: [gas_bottle_id], references: [id], onDelete: Cascade)
  gas_bottle_id String
}

model Commandes {
  id              String            @id @default(cuid())
  delivery_date   DateTime
  adress_delivery String
  statut          String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  user            Users?            @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id         String?
  Commandes_Items Commandes_Items[]
}

model Commandes_Items {
  id           String      @id @default(cuid())
  quantity     Int
  total_price  Float
  gasbottle    GasBottles? @relation(fields: [gasbottle_id], references: [id], onDelete: Cascade)
  gasbottle_id String?
  commande     Commandes?  @relation(fields: [commande_id], references: [id], onDelete: Cascade)
  commande_id  String?
}

model Delivies {
  id              String   @id @default(cuid())
  delivery_date   DateTime
  delivery_status String
}
