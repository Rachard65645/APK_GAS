// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
//migration       npm exec prisma migrate dev

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// model Session {
//   id        String     @id @default(cuid())
//   user_id   String      @unique
//   token String @unique
//   freshToken String @unique
//   expiredAt DateTime 
//   createdAt DateTime     @default(now())
//   updatedAt DateTime     @updatedAt
// }

model Users {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  password  String 
  phone     String
  address   String
  city      String
  roles     Json     @default("[\"ROLE_USER\"]")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  store     Stores[]
  orders    Orders[]
}

model Stores {
  id         String       @id @default(cuid())
  name       String
  pseudo     String?
  ville      String
  adress     String
  logo       String? 
  longitude  Float        @unique
  latitude   Float        @unique
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  user       Users?       @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id    String?
  gasbottles GasBottles[]
}

model GasBottles {
  id             String        @id @default(cuid())
  brand          String
  width          Float
  stock          Int
  availableStock Int
  price          Float
  description    String        @db.Text
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  store          Stores?       @relation(fields: [store_id], references: [id], onDelete: Cascade)
  store_id       String?
  ordersItems    OrdersItems[]
}

model Orders {
  id              String        @id @default(cuid())
  deliveryDate    DateTime
  status          String
  total_price     Float         @default(0)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  user            Users?        @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id         String?
  Commandes_Items OrdersItems[]
  deliveries      Delivies[]
}

model OrdersItems {
  id           String      @id @default(cuid())
  quantity     Int
  gasbottle    GasBottles? @relation(fields: [gasbottle_id], references: [id], onDelete: Cascade)
  gasbottle_id String?
  orders       Orders?     @relation(fields: [commande_id], references: [id], onDelete: Cascade)
  commande_id  String?
}

model Delivies {
  id             String   @id @default(cuid())
  deliveryDate   DateTime
  deliveryStatus String
  address        String
  commande       Orders?  @relation(fields: [commande_id], references: [id], onDelete: Cascade)
  commande_id    String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}
