// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// npm exec prisma migrate dev

// Registre du commerce et du crédit mobilier (RCCM) : Ce document prouve l'immatriculation de votre entreprise ou boutique auprès du Registre de commerce.
// Carte de contribuable : Cette carte prouve que l'entreprise est enregistrée auprès de l'administration fiscale.
// Patente : Impôt annuel payé par les entreprises exerçant une activité commerciale, industrielle ou artisanale.
// Statuts de l'entreprise (pour les sociétés) : Comme en France, les statuts définissent la structure et les règles de fonctionnement d'une entreprise.

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// User and point of sale management 
model Users {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  password  String
  phone     String
  address   String
  city      String
  roles     Json     @default("[\"ROLE_USER\"]")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Seller Seller[]

  Orders Orders[]

  AgregatorCustomer AgregatorCustomer[]

  Transaction Transaction[]
}

model Cover {
  id   String @id @default(cuid())
  name String
  lng  String
  lat  String

  Stores Stores[]

  AgregatorPrice AgregatorPrice[]
}

model Seller {
  id      String @id @default(cuid())
  user_id String
  CNI String
  RCCM String
  Patente String
  CC String
  status String
  users  Users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  Stores Stores[]
}

model Stores {
  id        String   @id @default(cuid())
  name      String
  pseudo    String?
  city      String
  address   String
  logo      String?
  lng       String?
  lat       String?
  seller_id String
  city_id   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sellers Seller @relation(fields: [seller_id], references: [id], onDelete: Cascade)
  Covers  Cover?  @relation(fields: [city_id], references: [id], onDelete: Cascade)

  Stocks Stocks[]

  Orders Orders[]
  @@index([seller_id])
  @@index([city_id])
}

// Products and stock management
model Stocks {
  id           String   @id @default(cuid())
  quantity     Int
  price        Int
  store_id     String
  gasBottle_id String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  stores     Stores     @relation(fields: [store_id], references: [id], onDelete: Cascade)
  gasBottles GasBottles @relation(fields: [gasBottle_id], references: [id], onDelete: Cascade)

  @@index([store_id])
  @@index([gasBottle_id])
}

model GasBottles {
  id                   String   @id @default(cuid())
  image                String?
  gasStation_id        String
  bottlesCategories_id String
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  gasStations       GasStation        @relation(fields: [gasStation_id], references: [id], onDelete: Cascade)
  bottlesCategories BottlesCategories @relation(fields: [bottlesCategories_id], references: [id], onDelete: Cascade)
  Stocks            Stocks[]

  OrderItems OrderItems[]
}

model BottlesCategories {
  id        String   @id @default(cuid())
  brand     String
  weigth    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  GasBottles GasBottles[]
}

model GasStation {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  GasBottles GasBottles[]
}

//Orders management 
model OrderItems {
  id            String @id @default(cuid())
  price         Int
  quantity      Int
  gasBottles_id String
  orders_id     String

  gasBottles GasBottles @relation(fields: [gasBottles_id], references: [id], onDelete: Cascade)
  orders     Orders     @relation(fields: [orders_id], references: [id], onDelete: Cascade)

  @@index([gasBottles_id])
  @@index([orders_id])
}

model Orders {
  id        String   @id @default(cuid())
  status    String
  store_id  String
  user_id   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  stores     Stores       @relation(fields: [store_id], references: [id], onDelete: Cascade)
  users      Users        @relation(fields: [user_id], references: [id], onDelete: Cascade)
  OrderItems OrderItems[]
}

//Payment management 
model Agregators {
  id        String   @id @default(cuid())
  name      String
  strategy  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  AgregatorCustomer AgregatorCustomer[]

  AgregatorPrice AgregatorPrice[]

  AgregatorService AgregatorService[]
}

model AggregatorMethods {
  id                  String @id @default(cuid())
  agregatorService_id String
  methodPaid_id       String

  agregatorServices AgregatorService @relation(fields: [agregatorService_id], references: [id], onDelete: Cascade)
  methodPaids       MethodPaid       @relation(fields: [methodPaid_id], references: [id], onDelete: Cascade)

  waittingWebhook waittingWebhook[]
}

model AgregatorCustomer {
  id            String   @id @default(cuid())
  value         String
  aggregator_id String
  user_id       String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  aggregators Agregators @relation(fields: [aggregator_id], references: [id], onDelete: Cascade)
  users       Users?     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model AgregatorPrice {
  id            String   @id @default(cuid())
  value         String?
  devValue      String?
  aggregator_id String
  cove_id       String
  reccurent     Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  aggregators Agregators @relation(fields: [aggregator_id], references: [id], onDelete: Cascade)
  covers      Cover      @relation(fields: [cove_id], references: [id], onDelete: Cascade)
}

model AgregatorService {
  id            String   @id @default(cuid())
  version       String?
  secretKey     String?
  apiKey        String?
  devApiKey     String?
  devPublicKey  String?
  webhookKey    String?
  aggregator_id String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  aggregators       Agregators          @relation(fields: [aggregator_id], references: [id], onDelete: Cascade)
  AggregatorMethods AggregatorMethods[]
}

model MethodPaid {
  id        String   @id @default(cuid())
  name      String
  file      String?
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  AggregatorMethods AggregatorMethods[]
}

model Transaction {
  id            String   @id @default(cuid())
  status        String
  amount        Float
  message       String
  code          String
  currency      String?
  currency_code String?
  type          String
  user_id       String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  users Users @relation(fields: [user_id], references: [id], onDelete: Cascade)

  waittingWebhook waittingWebhook[]
}

model Payment {
  id       String   @id @default(cuid())
  startAt  DateTime @default(now())
  finishAt DateTime @updatedAt
}

model waittingWebhook {
  id                  String   @id @default(cuid())
  session             String
  aggregatorMethod_id String
  transaction_id      String
  startAt             DateTime @default(now())
  finishAt            DateTime @updatedAt

  aggregatorMethods AggregatorMethods @relation(fields: [aggregatorMethod_id], references: [id], onDelete: Cascade)
  transactions      Transaction       @relation(fields: [transaction_id], references: [id], onDelete: Cascade)
}
